class Solution {
  public:
    string findOrder(vector<string> &words) {
        vector<int>adj[26];
        int V=26;
        vector<int> present(26, 0);

        for(auto word : words){
            for(auto ch : word){
                present[ch - 'a'] = 1;
            }
        }

        for(int i=0;i<words.size()-1;i++){
            string st1=words[i],st2=words[i+1];
            int j=0,k=0;
            while(j<st1.size() && k<st2.size() && st1[j]==st2[k]){
                j++,k++;
            }
            if(j==st1.size()) continue;
            if(j==st2.size()) return "";
            adj[st1[j]-'a'].push_back(st2[k]-'a');
        }
        vector<int>indegree(V,0);
        
        for(int i=0;i<26;i++){
            for(auto it:adj[i]){
                indegree[it]++;
            }
        }

        queue<int>q;
        for(int i=0;i<V;i++){
            if(indegree[i]==0 && present[i]==1){
                q.push(i);
            }
        }
        string ans="";
        while(!q.empty()){
            int node=q.front();
            q.pop();
            char c=node+'a';
            ans+=c;
            for(auto it : adj[node]){
                indegree[it]--;
                if(indegree[it]==0){
                    q.push(it);
                }
            }
        }
        int count = 0;
        for(int i=0;i<V;i++){
            if(present[i]==1) count++;
        }

        if(ans.size() < count) return ""; 
        
        return ans;
    }
};
